/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package charts;

import connection.DBConnection;
import java.awt.Color;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;

/**
 *
 * @author Chosen Egbe
 */
public class ChartStudentSelect extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    PreparedStatement pst1 = null;
    ResultSet rs1 = null;
    PreparedStatement pst2 = null;
    ResultSet rs2 = null;
    PreparedStatement pst3 = null;
    ResultSet rs3 = null;
    PreparedStatement pst4 = null;
    ResultSet rs4 = null;    
    public ChartStudentSelect() {
        initComponents();
        
        conn = DBConnection.connectDB();
          
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChartStudentSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChartStudentSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChartStudentSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChartStudentSelect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChartStudentSelect frame = new ChartStudentSelect();
                frame.setTitle("Chart");
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
              
            }
        });
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        combo_year = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        btn_barChart = new javax.swing.JButton();
        btn_lineChart = new javax.swing.JButton();
        btn_pieChart = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        rbrn_3D = new javax.swing.JRadioButton();
        rbtn_2D = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select year", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        combo_year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "1", "2", "3", "4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choose type of chart", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        btn_barChart.setText("Bar Chart");
        btn_barChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_barChartActionPerformed(evt);
            }
        });

        btn_lineChart.setText("Line Graph");
        btn_lineChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_lineChartActionPerformed(evt);
            }
        });

        btn_pieChart.setText("Pie Chart");
        btn_pieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pieChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_barChart)
                .addGap(18, 18, 18)
                .addComponent(btn_pieChart)
                .addGap(18, 18, 18)
                .addComponent(btn_lineChart)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_barChart)
                    .addComponent(btn_pieChart)
                    .addComponent(btn_lineChart))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graph mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(102, 102, 102))); // NOI18N

        buttonGroup1.add(rbrn_3D);
        rbrn_3D.setText("3D Chart");
        rbrn_3D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbrn_3DActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtn_2D);
        rbtn_2D.setText("Normal Chart");
        rbtn_2D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtn_2DActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbtn_2D)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbrn_3D)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtn_2D)
                    .addComponent(rbrn_3D))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_barChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_barChartActionPerformed
        barChart();
        
    }//GEN-LAST:event_btn_barChartActionPerformed
    private void barChart(){
     Double countCSE = 0.0;
     Double countCNS = 0.0;
     Double countISVMA= 0.0;
     Double countMIR = 0.0;
        if(combo_year.getSelectedIndex() ==0){
  
        String sql1 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '1'  GROUP BY year_of_studies";
        try{
            pst1 = conn.prepareStatement(sql1);            
            rs1 = pst1.executeQuery();
            if(rs1.next()){
               countCSE = Double.parseDouble(rs1.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
 
        String sql2 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '2'  GROUP BY year_of_studies";
        try{
            pst2 = conn.prepareStatement(sql2);            
            rs2 = pst2.executeQuery();
            if(rs2.next()){
               countCNS = Double.parseDouble(rs2.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
       String sql3 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '3'  GROUP BY year_of_studies";
        try{
            pst3 = conn.prepareStatement(sql3);            
            rs3 = pst3.executeQuery();
            if(rs3.next()){
               countISVMA = Double.parseDouble(rs3.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
       String sql4 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '4'  GROUP BY year_of_studies";
        try{
            pst4 = conn.prepareStatement(sql4);            
            rs4 = pst4.executeQuery();
            if(rs4.next()){
               countMIR = Double.parseDouble(rs4.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
        //System.out.println(countCSE + " "+countCNS+ " "+countMIR+ " "+countISVMA);
         
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(countCSE,"Value","First Year"); //Marks for y-axis and Student1 for x-axis
        dataset.setValue(countCNS,"Value","Second Year");
        dataset.setValue(countISVMA,"Value","Third Year");
        dataset.setValue(countMIR,"Value","Fourth Year");
        
       
        if(buttonGroup1.getSelection() != null){
            
       if(graphSelectionMode.equals("normal")){
        JFreeChart chart = ChartFactory.createBarChart("First, Second, Thrid and Fourth Year Students","Years","Values", dataset, PlotOrientation.VERTICAL,false, true, false);
        
        
        
        chart.setBackgroundPaint(Color.GRAY);
        chart.getTitle().setPaint(Color.BLUE);
        
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        
        ChartFrame frame = new ChartFrame("Bar Chart for Students",chart);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);      

        try{
            final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            final File file1 = new File("Charts\\bar2DChart.png");
            ChartUtilities.saveChartAsPNG(file1, chart, 600, 500,info);
            
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                 
        }else if(graphSelectionMode.equals("3dnormal")){
        JFreeChart chart = ChartFactory.createBarChart3D("First, Second, Thrid and Fourth Year Students","Years","Values", dataset, PlotOrientation.VERTICAL,false, true, false);
        chart.setBackgroundPaint(Color.GRAY);
        chart.getTitle().setPaint(Color.BLUE);
        
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        
        ChartFrame frame = new ChartFrame("Bar Chart for Students",chart);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true); 
       }

    
        }else{
            JOptionPane.showMessageDialog(null, "Choose Graph mode on the Radio button");
        }
        
        
    }else if(combo_year.getSelectedItem() != null){

        String sql1 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CSE' GROUP BY year_of_studies";
        try{
            pst1 = conn.prepareStatement(sql1);            
            rs1 = pst1.executeQuery();
            if(rs1.next()){
               countCSE = Double.parseDouble(rs1.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
 
        String sql2 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CNS' GROUP BY year_of_studies";
        try{
            pst2 = conn.prepareStatement(sql2);            
            rs2 = pst2.executeQuery();
            if(rs2.next()){
               countCNS = Double.parseDouble(rs2.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
       String sql3 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'ISVMA' GROUP BY year_of_studies";
        try{
            pst3 = conn.prepareStatement(sql3);            
            rs3 = pst3.executeQuery();
            if(rs3.next()){
               countISVMA = Double.parseDouble(rs3.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
       String sql4 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'MIR' GROUP BY year_of_studies";
        try{
            pst4 = conn.prepareStatement(sql4);            
            rs4 = pst4.executeQuery();
            if(rs4.next()){
               countMIR = Double.parseDouble(rs4.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
        //System.out.println(countCSE + " "+countCNS+ " "+countMIR+ " "+countISVMA);

         

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(countCSE,"Value","CSE"); //Marks for y-axis and Student1 for x-axis
        dataset.setValue(countCNS,"Value","CNS");
        dataset.setValue(countISVMA,"Value","ISVMA");
        dataset.setValue(countMIR,"Value","MIR");
        
               
        if(buttonGroup1.getSelection() != null){
            
       if(graphSelectionMode.equals("normal")){
        JFreeChart chart = ChartFactory.createBarChart(combo_year.getSelectedItem().toString()+"th Year Students","Faculty","Values", dataset, PlotOrientation.VERTICAL,false, true, false);
        chart.setBackgroundPaint(Color.GRAY);
        chart.getTitle().setPaint(Color.BLUE);
        
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        
        ChartFrame frame = new ChartFrame("Bar Chart for "+combo_year.getSelectedItem().toString()+ "th year ",chart);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);     

        try{
            final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            final File file1 = new File("Charts\\barChart2D.png");
            ChartUtilities.saveChartAsPNG(file1, chart, 600, 500,info);
            
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                 
        }else if(graphSelectionMode.equals("3dnormal")){
         JFreeChart chart = ChartFactory.createBarChart3D(combo_year.getSelectedItem().toString()+"th Year Students","Faculty","Values", dataset, PlotOrientation.VERTICAL,false, true, false);
        chart.setBackgroundPaint(Color.GRAY);
        chart.getTitle().setPaint(Color.BLUE);
        
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        
        ChartFrame frame = new ChartFrame("Bar Chart for "+combo_year.getSelectedItem().toString()+ "th year ",chart);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);     

       }

    
        }else{
            JOptionPane.showMessageDialog(null, "Choose Graph mode on the Radio button");
        }
             
    
    }
      
    }
    

    private void pieChart(){
        
            Double countCSE = 0.0;
            Double countCNS = 0.0;
            Double countISVMA= 0.0;
            Double countMIR = 0.0;
        if(combo_year.getSelectedIndex() ==0){
  
        String sql1 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '1'  GROUP BY year_of_studies";
        try{
            pst1 = conn.prepareStatement(sql1);            
            rs1 = pst1.executeQuery();
            if(rs1.next()){
               countCSE = Double.parseDouble(rs1.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
 
        String sql2 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '2'  GROUP BY year_of_studies";
        try{
            pst2 = conn.prepareStatement(sql2);            
            rs2 = pst2.executeQuery();
            if(rs2.next()){
               countCNS = Double.parseDouble(rs2.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
       String sql3 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '3'  GROUP BY year_of_studies";
        try{
            pst3 = conn.prepareStatement(sql3);            
            rs3 = pst3.executeQuery();
            if(rs3.next()){
               countISVMA = Double.parseDouble(rs3.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
       String sql4 = "SELECT year_of_studies, COUNT(year_of_studies) FROM students WHERE year_of_studies = '4'  GROUP BY year_of_studies";
        try{
            pst4 = conn.prepareStatement(sql4);            
            rs4 = pst4.executeQuery();
            if(rs4.next()){
               countMIR = Double.parseDouble(rs4.getString("COUNT(year_of_studies)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
        //System.out.println(countCSE + " "+countCNS+ " "+countMIR+ " "+countISVMA);
         
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("First Year", countCSE);
        pieDataset.setValue("Second Year",countCNS);
        pieDataset.setValue("Third Year",countISVMA);
        pieDataset.setValue("Fourth Year",countMIR);
        if(buttonGroup1.getSelection() != null){
            
       if(graphSelectionMode.equals("normal")){
         JFreeChart chart1 = ChartFactory.createPieChart("First, Second, Thrid and Fourth Year Students", pieDataset, true, true, true); //2D
         PiePlot p = (PiePlot)chart1.getPlot();
        
        /*
            I have used the library import org.jfree.chart.plot.PiePlot3D; instead of this import com.orsoncharts.plot.PiePlot3D due the fact that the 
        later will through the error cannot Convert Plot to PiePlot3D;
        */ 
        ChartFrame frame = new ChartFrame("Pie Chart", chart1);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);       

        try{
            final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            final File file1 = new File("Charts\\PieChart.png");
            ChartUtilities.saveChartAsPNG(file1, chart1, 600, 500,info);
            
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                 
        }else if(graphSelectionMode.equals("3dnormal")){
          JFreeChart chart1 = ChartFactory.createPieChart3D("First, Second, Thrid and Fourth Year Students", pieDataset, true, true, true); //3D
         PiePlot3D p = (PiePlot3D)chart1.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
        
        ChartFrame frame = new ChartFrame("Pie Chart", chart1);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true); 
       }

    
        }else{
            JOptionPane.showMessageDialog(null, "Choose Graph mode on the Radio button");
        }
        
        
    }else if(combo_year.getSelectedItem() != null){

        String sql1 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CSE' GROUP BY year_of_studies";
        try{
            pst1 = conn.prepareStatement(sql1);            
            rs1 = pst1.executeQuery();
            if(rs1.next()){
               countCSE = Double.parseDouble(rs1.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
 
        String sql2 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CNS' GROUP BY year_of_studies";
        try{
            pst2 = conn.prepareStatement(sql2);            
            rs2 = pst2.executeQuery();
            if(rs2.next()){
               countCNS = Double.parseDouble(rs2.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
       String sql3 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'ISVMA' GROUP BY year_of_studies";
        try{
            pst3 = conn.prepareStatement(sql3);            
            rs3 = pst3.executeQuery();
            if(rs3.next()){
               countISVMA = Double.parseDouble(rs3.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
       String sql4 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'MIR' GROUP BY year_of_studies";
        try{
            pst4 = conn.prepareStatement(sql4);            
            rs4 = pst4.executeQuery();
            if(rs4.next()){
               countMIR = Double.parseDouble(rs4.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
        //System.out.println(countCSE + " "+countCNS+ " "+countMIR+ " "+countISVMA);

         
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("CSE", countCSE);
        pieDataset.setValue("CNS",countCNS);
        pieDataset.setValue("ISVMA",countISVMA);
        pieDataset.setValue("MIR",countMIR);
        if(buttonGroup1.getSelection() != null){
            
       if(graphSelectionMode.equals("normal")){
         JFreeChart chart1 = ChartFactory.createPieChart(combo_year.getSelectedItem().toString()+" Year Students by Faculties", pieDataset, true, true, true); //2D
         PiePlot p = (PiePlot)chart1.getPlot();
        
        /*
            I have used the library import org.jfree.chart.plot.PiePlot3D; instead of this import com.orsoncharts.plot.PiePlot3D due the fact that the 
        later will through the error cannot Convert Plot to PiePlot3D;
        */ 
        ChartFrame frame = new ChartFrame("Pie Chart", chart1);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);       

        try{
            final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            final File file1 = new File("Charts\\PieChart.png");
            ChartUtilities.saveChartAsPNG(file1, chart1, 600, 500,info);
            
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                 
        }else if(graphSelectionMode.equals("3dnormal")){
          JFreeChart chart1 = ChartFactory.createPieChart3D(combo_year.getSelectedItem().toString()+" Year Students by Faculties", pieDataset, true, true, true); //3D
         PiePlot3D p = (PiePlot3D)chart1.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
        
        ChartFrame frame = new ChartFrame("Pie Chart", chart1);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true); 
       }

    
        }else{
            JOptionPane.showMessageDialog(null, "Choose Graph mode on the Radio button");
        }
             
    
    }

   }
   private void lineChart(){
         
            Double countCSE = 0.0;
            Double countCNS = 0.0;
            Double countISVMA= 0.0;
            Double countMIR = 0.0;
        if(combo_year.getSelectedIndex() == 0){
         try{
           String queryChart = "SELECT year_of_studies, COUNT(year_of_studies) FROM students GROUP BY year_of_studies";
           JDBCCategoryDataset dataset = new JDBCCategoryDataset(DBConnection.connectDB(),queryChart);
           if(buttonGroup1.getSelection() != null){
               
            if(graphSelectionMode.equals("normal")){
                      JFreeChart chart = ChartFactory.createLineChart("All Years of studies", "Year of Studies", "Number of Students", dataset,PlotOrientation.VERTICAL,false,true,true);
           BarRenderer renderer = null;
        
                     /*To ge the orientation*/
           CategoryPlot plot = chart.getCategoryPlot();
           CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
           //xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
            /*To ge the orientation*/
           
           renderer = new BarRenderer();
           //define frame to show your chart
           ChartFrame frame = new ChartFrame("Students Chart",chart);
           frame .setSize(400,400);
           frame.setLocationRelativeTo(null);
           frame.setVisible(true);
            
            }else if(graphSelectionMode.equals("3dnormal")){
           JFreeChart chart = ChartFactory.createLineChart3D("All Years of studies", "Year of Studies", "Number of Students", dataset,PlotOrientation.VERTICAL,false,true,true);
           BarRenderer renderer = null;
        
                     /*To ge the orientation*/
           CategoryPlot plot = chart.getCategoryPlot();
           CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
           //xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
            /*To ge the orientation*/
           
           renderer = new BarRenderer();
           //define frame to show your chart
           ChartFrame frame = new ChartFrame("Students Chart",chart);
           frame .setSize(400,400);
           frame.setLocationRelativeTo(null);
           frame.setVisible(true);           
            }
 
           }else{
               JOptionPane.showMessageDialog(null,"Choose the view model in the radio button ");
           }
         }catch(Exception e){
             JOptionPane.showMessageDialog(null, e);
         }
         
    
  
        
    }else if(combo_year.getSelectedItem() != null){

        String sql1 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CSE' GROUP BY year_of_studies";
        try{
            pst1 = conn.prepareStatement(sql1);            
            rs1 = pst1.executeQuery();
            if(rs1.next()){
               countCSE = Double.parseDouble(rs1.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
 
        String sql2 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'CNS' GROUP BY year_of_studies";
        try{
            pst2 = conn.prepareStatement(sql2);            
            rs2 = pst2.executeQuery();
            if(rs2.next()){
               countCNS = Double.parseDouble(rs2.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
       String sql3 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'ISVMA' GROUP BY year_of_studies";
        try{
            pst3 = conn.prepareStatement(sql3);            
            rs3 = pst3.executeQuery();
            if(rs3.next()){
               countISVMA = Double.parseDouble(rs3.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
       String sql4 = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'  "
                + " AND Faculty = 'MIR' GROUP BY year_of_studies";
        try{
            pst4 = conn.prepareStatement(sql4);            
            rs4 = pst4.executeQuery();
            if(rs4.next()){
               countMIR = Double.parseDouble(rs4.getString("COUNT(Faculty)"));
                //System.out.println(count + " hello");
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        } 
        //System.out.println(countCSE + " "+countCNS+ " "+countMIR+ " "+countISVMA);

   
                    
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("CSE", countCSE);
        pieDataset.setValue("CNS",countCNS);
        pieDataset.setValue("ISVMA",countISVMA);
        pieDataset.setValue("MIR",countMIR);
        if(buttonGroup1.getSelection() != null){

       try{
           
           String queryChart = "SELECT Faculty, COUNT(Faculty) FROM students WHERE year_of_studies = '"+combo_year.getSelectedItem().toString()+"'"
                   + " GROUP BY Faculty";
           JDBCCategoryDataset dataset = new JDBCCategoryDataset(DBConnection.connectDB(),queryChart);
           if(buttonGroup1.getSelection() != null){
               
            if(graphSelectionMode.equals("normal")){
                      JFreeChart chart = ChartFactory.createLineChart(combo_year.getSelectedItem().toString()+"th Year of Studies", "Faculty", "Number of Students", dataset,PlotOrientation.VERTICAL,false,true,true);
           BarRenderer renderer = null;
        
                     /*To ge the orientation*/
           CategoryPlot plot = chart.getCategoryPlot();
           CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
           //xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
            /*To ge the orientation*/
           
           renderer = new BarRenderer();
           //define frame to show your chart
           ChartFrame frame = new ChartFrame(combo_year.getSelectedItem().toString()+ "th Year  Student Chart",chart);
           frame .setSize(400,400);
           frame.setLocationRelativeTo(null);
           frame.setVisible(true);
            
            }else if(graphSelectionMode.equals("3dnormal")){
           JFreeChart chart = ChartFactory.createLineChart3D(combo_year.getSelectedItem().toString()+"th Year of Studies", "Faculty",  "Number of Students", dataset,PlotOrientation.VERTICAL,false,true,true);
           BarRenderer renderer = null;
        
                     /*To ge the orientation*/
           CategoryPlot plot = chart.getCategoryPlot();
           CategoryAxis xAxis = (CategoryAxis)plot.getDomainAxis();
           //xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
            /*To ge the orientation*/
           
           renderer = new BarRenderer();
           //define frame to show your chart
           ChartFrame frame = new ChartFrame( combo_year.getSelectedItem().toString()+ "th Year  Student Chart",chart);
           frame .setSize(400,400);
           frame.setLocationRelativeTo(null);
           frame.setVisible(true);           
            }
 
           }else{
               JOptionPane.showMessageDialog(null,"Choose the view model in the radio button ");
           }
         }catch(Exception e){
             JOptionPane.showMessageDialog(null, e);
         }
         
     
        }
     }
    }
    private void btn_pieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pieChartActionPerformed
            pieChart();
         
    }//GEN-LAST:event_btn_pieChartActionPerformed

    private void rbtn_2DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtn_2DActionPerformed
        graphSelectionMode = "normal";
    }//GEN-LAST:event_rbtn_2DActionPerformed

    private void rbrn_3DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbrn_3DActionPerformed
         graphSelectionMode = "3dnormal";
    }//GEN-LAST:event_rbrn_3DActionPerformed

    private void btn_lineChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_lineChartActionPerformed
        lineChart();
    }//GEN-LAST:event_btn_lineChartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_barChart;
    private javax.swing.JButton btn_lineChart;
    private javax.swing.JButton btn_pieChart;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> combo_year;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton rbrn_3D;
    private javax.swing.JRadioButton rbtn_2D;
    // End of variables declaration//GEN-END:variables

   String graphSelectionMode = null;
   

}
